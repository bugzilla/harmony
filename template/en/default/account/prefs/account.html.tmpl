[%# The contents of this file are subject to the Mozilla Public
  # License Version 1.1 (the "License"); you may not use this file
  # except in compliance with the License. You may obtain a copy of
  # the License at http://www.mozilla.org/MPL/
  #
  # Software distributed under the License is distributed on an "AS
  # IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
  # implied. See the License for the specific language governing
  # rights and limitations under the License.
  #
  # The Original Code is the Bugzilla Bug Tracking System.
  #
  # The Initial Developer of the Original Code is Netscape Communications
  # Corporation. Portions created by Netscape are
  # Copyright (C) 1998 Netscape Communications Corporation. All
  # Rights Reserved.
  #
  # Contributor(s): Gervase Markham <gerv@gerv.net>
  #%]

[%# INTERFACE:
  # realname: string. The user's real name, if any.
  # login_change_date: string. The date the email change will be complete. (optional)
  # new_login_name:    string. The user's new Bugzilla login whilst not confirmed. (optional)
  #%]
<style>
 .email-field {
      margin-bottom: 5px;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    input[type="email"] {
      box-sizing: border-box;
    }
    .delete-btn {
      background: #ff4d4d;
      color: white;
      border: none;
      padding: 4px 8px;
      cursor: pointer;
      font-size: 0.9em;
      font-weight: bold;
      border-radius: 4px;
    }
    .delete-btn:hover {
      background: #ff1a1a;
      color: white;
    }
    .fade-out {
      opacity: 0;
      transform: scale(0.8);
    }
</style>
<script [% script_nonce FILTER none %]>
<!--
let emailFieldCount = 1; // Keeps track of the current number of email fields. Initialized to 1 as there's always a primary email.
const maxEmailFields = 3; // Defines the maximum number of email fields allowed.

/**
 * Adds a new email input field to the form dynamically.
 * It clones the first email field, updates its placeholder,
 * assigns unique name and id attributes, and appends a delete button
 * if it doesn't already exist. It also manages the visibility of the
 * "Add Email" button based on the maximum number of fields.
 */
function addEmailField() {
  // Check if the current number of email fields is less than the maximum allowed.
  if (emailFieldCount < maxEmailFields) {
    // Get the container element where the email fields are located.
    const container = document.getElementById('email-fields');
    // Get the first email field div to use as a template for cloning.
    const firstFieldDiv = container.querySelector('.email-field');

    // Clone the first email field div to create a new field.
    const newFieldDiv = firstFieldDiv.cloneNode(true);
    // Get the input element within the cloned div.
    const newInput = newFieldDiv.querySelector('input');

    // Clear the value of the cloned input field.
    newInput.value = '';

    // Assign unique name and id attributes to the new input field.
    // This is crucial for the backend to correctly identify each email address.
    newInput.name = `email${emailFieldCount + 1}`;
    newInput.id = `email${emailFieldCount + 1}`;

    // Define an array of placeholders for each email field.
    const placeholders = [
      "Enter email address",          // 1st
      "Enter second email address",   // 2nd
      "Enter third email address"     // 3rd
    ];
    // Set the placeholder text for the new input field based on the current count.
    newInput.placeholder = placeholders[emailFieldCount];

    // Check if a delete button already exists in the cloned field.
    if (!newFieldDiv.querySelector('.delete-btn')) {
      // Create a new delete button element.
      const deleteBtn = document.createElement('button');
      deleteBtn.type = 'button';
      deleteBtn.textContent = 'Delete';
      deleteBtn.className = 'delete-btn';
      // Define the function to be executed when the delete button is clicked.
      deleteBtn.onclick = function() {
        // Add a CSS class for a fade-out animation.
        newFieldDiv.classList.add('fade-out');

        // Use setTimeout to wait for the CSS transition to complete before removing the element.
        setTimeout(() => {
          // Remove the email field div from the container.
          container.removeChild(newFieldDiv);
          // Decrement the email field counter.
          emailFieldCount--;

          // If the number of email fields is now less than the maximum,
          // make the "Add Email" button visible again.
          if (emailFieldCount < maxEmailFields) {
            document.getElementById('add-email-btn').style.display = 'inline-block';
          }

          // Re-index the name and id attributes of the remaining email fields
          // to maintain a consistent sequence (email1, email2, email3).
          reIndexEmailFields();

        }, 300); // matches the transition time in CSS
      };
      // Append the newly created delete button to the new email field div.
      newFieldDiv.appendChild(deleteBtn);
    }

    // Append the newly created and configured email field div to the container.
    container.appendChild(newFieldDiv);

    // Set focus to the newly added input field for better user experience.
    newInput.focus();

    // Increment the email field counter.
    emailFieldCount++;

    // If the maximum number of email fields has been reached, hide the "Add Email" button.
    if (emailFieldCount === maxEmailFields) {
      document.getElementById('add-email-btn').style.display = 'none';
    }
  }
}

/**
 * Re-indexes the name and id attributes of all existing email input fields.
 * This function is called after an email field is deleted to ensure that the
 * remaining fields maintain a sequential numbering (email1, email2, email3)
 * for their name and id attributes, regardless of the order in which fields
 * were added or deleted. It also updates the placeholders accordingly and
 * adjusts the visibility of the "Add Email" button.
 */
function reIndexEmailFields() {
  // Get the container element holding the email fields.
  const container = document.getElementById('email-fields');
  // Get all the email field divs within the container.
  const emailFieldDivs = container.querySelectorAll('.email-field');
  // Reset the email field counter before re-indexing.
  emailFieldCount = 0;

  // Iterate through each email field div.
  emailFieldDivs.forEach((fieldDiv, index) => {
    // Get the input element within the current email field div.
    const inputField = fieldDiv.querySelector('input');
    // Calculate the new index for the name and id attributes (starting from 1).
    const newIndex = index + 1;
    // Update the name attribute of the input field with the new index.
    inputField.name = `email${newIndex}`;
    // Update the id attribute of the input field with the new index.
    inputField.id = `email${newIndex}`;

    // Define the array of placeholders again for setting based on the new index.
    const placeholders = [
      "Enter email address",          // 1st
      "Enter second email address",   // 2nd
      "Enter third email address"     // 3rd
    ];
    // Set the placeholder text based on the current index in the loop.
    inputField.placeholder = placeholders[index];
    // Increment the email field counter as we re-index.
    emailFieldCount++;
  });

  // After re-indexing, adjust the visibility of the "Add Email" button.
  if (emailFieldCount < maxEmailFields) {
    document.getElementById('add-email-btn').style.display = 'inline-block';
  } else {
    document.getElementById('add-email-btn').style.display = 'none';
  }
}
// -->
</script>


[%# BMO - add hook for displaying user-profile link %]
[% Hook.process('start') %]

<div class="flex">
  <div class="flex-left">
    <table>
      <tr>
        <th align="right" width="150">Your real name:</th>
        <td>
          <input size="35" name="realname" value="[% realname FILTER html %]"
                 placeholder="optional, but encouraged">
        </td>
      </tr>
      <tr>
        <th align="right" width="150">Your login name:</th>
        <td>
        [% IF user.authorizer.can_change_login %]
                  <input size="35" name="new_login" id="new_login" value="[% user.login FILTER html %]">
            [% ELSE %]
          [% user.login FILTER html %]
        [% END %]
        </td>
      </tr>

      [%# BMO - moved field hook from end of file to here to group with other account fields %]
      [% Hook.process('field') %]

      [% SET can_change = [] %]
      [% IF user.authorizer.can_change_email && Param('allowemailchange') %]
        [% can_change.push('email address') %]
      [% END %]
      [% IF user.authorizer.can_change_password %]
        [% can_change.push('password') %]
      [% END %]

      [% IF can_change.size %]

        [% IF user.authorizer.can_change_email && Param('allowemailchange') %]
          [% IF login_change_date %]
            [% IF new_login_name %]
              <tr>
                <th align="right">Pending primary email address:</th>
                <td>[% new_login_name FILTER html %]</td>
              </tr>
              <tr>
                <th align="right">Change request expires:</th>
                <td>[% login_change_date FILTER time %]</td>
              </tr>
            [% ELSE %]
              <tr>
                <th align="right">Confirmed primary email address:</th>
                <td>[% user.login FILTER html %]</td>
              </tr>
              <tr>
                <th align="right">Completion date:</th>
                <td>[% login_change_date FILTER time %]</td>
              </tr>
            [% END %]
          [% ELSE %]
            <tr>
              <th align="right" valign="top">Email addresses:</th>
              <td>
		<div id="email-fields">   
		  <div class="email-field">             
		   <input type="email" size="35" name="email1" id="email1" placeholder="Enter email address">
                  </div> 
		</div>
                <button type="button" id="add-email-btn" onclick="addEmailField()">Add another email</button><br><br>
                [% INCLUDE "mfa/protected.html.tmpl" %]
              </td>
            </tr>
          [% END %]
        [% END %]

        <tr>
          <td></td>
          <td><hr></td>
        </tr>
        <tr>
          <td colspan="3">
            Your current password is required to
            confirm password changes.
          </td>
        </tr>

        <tr>
          <th align="right">Current password:</th>
          <td>
            <input type="hidden" name="old_login" value="[% user.login FILTER html %]">
            <input autocomplete="current-password" type="password" name="old_password" id="old_password">
            <a href="#" id="forgot-password">I forgot my password</a>
          </td>
        </tr>
        [% IF user.authorizer.can_change_password %]
          <tr>
          <td>&nbsp;</td>
          <td>
            <em>Warning:</em> Changing your password will automatically log out
            other login sessions except for the current one.
          </td>
          </tr>
          <tr>
            <th align="right">New password:</th>
            <td>
              <input autocomplete="new-password" type="password" name="new_password1" id="new_password1">
              [% INCLUDE "mfa/protected.html.tmpl" %]
            </td>
          </tr>
          <tr>
          <td>&nbsp;</td>
          <td>
            [% Param('passwdqc_desc') FILTER html_light %]
          </td>
          </tr>
          <tr>
            <th align="right">Confirm new password:</th>
            <td>
              <input autocomplete="new-password" type="password" name="new_password2" id="new_password2">
            </td>
          </tr>
        [% END %]
        <tr>
          <td></td>
          <td><hr></td>
        </tr>
      [% END %]

      <tr>
        <td></td>
        <td>
          <a href="#" id="account-disable-toggle"><span id="account-disable-spinner">&#9656;</span> Disable My Account</a>
        </td>
      </tr>
      <tr id="account-disable" style="display:none">
        <td></td>
        <td>
          <p>
            Your contributions on bugzilla.mozilla.org will still be visible;
            however, your email address and name will be removed in most locations.
            We are not able to remove your details that are part of comment text.
          </p>
          <p>
            <em>Warning:</em> You will need to enter your current password above to
            confirm this action.
          </p>
          <p>
            <input type="checkbox" id="account-disable-confirm">
            I acknowledge that my account will not be functional after it has been
            disabled.
          </p>
          <input type="hidden" name="account_disable" id="account_disable">
          <button type="button" id="account-disable-button" class="danger" disabled>Disable Account</button>
        </td>
      </tr>
      <tr>
        <td></td>
        <td><hr></td>
      </tr>
    </table>
  </div>

  [% INCLUDE "global/password-features.html.tmpl" class="flex-right" password_page="account" %]
</div>

[% tab_footer = BLOCK %]
  <form action="[% basepath FILTER none %]token.cgi" method="post" id="forgot-form">
    <input type="hidden" name="loginname" value="[% user.login FILTER html %]">
    <input type="hidden" name="a" value="reqpw">
    <input type="hidden" name="token" value="[% issue_hash_token(['reqpw']) FILTER html %]">
  </form>
[% END %]
